security:
    # https://symfony.com/doc/current/security/authenticator_manager.html
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#c-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\Utilisateur:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\Utilisateur
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
       
        login:
            pattern: ^/api/generate_token
            stateless: true
            # anonymous: true
            json_login:
                check_path: generate_token
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        api:
            pattern: ^/api
            stateless: true
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator

        main:
            lazy: true
            # anonymous: true
            provider: app_user_provider
            # custom_authenticator: App\Security\UtilisateurAuthenticator

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/api/token/refresh, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/generate_token, roles: ROLE_USER}
        - { path: ^/api/utilisateurs/list, roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/api/utilisateurs/list/id, roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/api/fichiers/new, roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/api/fichiers/show, roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/api/fichiers/utilisateur/id, roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/api/fichiers/edit/id, roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/api/fichiers/del/id, roles: IS_AUTHENTICATED_FULLY }